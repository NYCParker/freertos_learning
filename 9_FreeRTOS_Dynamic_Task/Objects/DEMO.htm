<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\DEMO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\DEMO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon May 17 21:32:15 2021
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6e]">AppTaskCreate_Task</a> from sys_task.o(i.AppTaskCreate_Task) referenced from sys_task.o(i.AppTaskCreate)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[52]">CAN0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[53]">CAN0_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[54]">CAN0_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[55]">CAN0_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[56]">CAN0_4_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[57]">CAN0_5_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[58]">CAN0_6_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[59]">CAN0_7_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[32]">CCU40_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[33]">CCU40_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[34]">CCU40_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[35]">CCU40_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[36]">CCU41_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[37]">CCU41_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[38]">CCU41_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[39]">CCU41_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[3a]">CCU42_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[3b]">CCU42_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[3c]">CCU42_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[3d]">CCU42_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[3e]">CCU43_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[3f]">CCU43_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[40]">CCU43_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[41]">CCU43_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[42]">CCU80_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[43]">CCU80_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[44]">CCU80_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[45]">CCU80_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[46]">CCU81_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[47]">CCU81_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[48]">CCU81_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[49]">CCU81_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[30]">DAC0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[31]">DAC0_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[28]">DSD0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[29]">DSD0_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[2a]">DSD0_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[2b]">DSD0_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[2c]">DSD0_4_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[2d]">DSD0_5_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[2e]">DSD0_6_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[2f]">DSD0_7_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[b]">ERU0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[c]">ERU0_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[d]">ERU0_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[e]">ERU0_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[f]">ERU1_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[10]">ERU1_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[11]">ERU1_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[12]">ERU1_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[6a]">ETH0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[67]">FCE0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[68]">GPDMA0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[4e]">HRPWM_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[4f]">HRPWM_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[50]">HRPWM_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[51]">HRPWM_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[6f]">LED1_Task</a> from sys_task.o(i.LED1_Task) referenced from sys_task.o(i.AppTaskCreate_Task)
 <LI><a href="#[70]">LED2_Task</a> from sys_task.o(i.LED2_Task) referenced from sys_task.o(i.AppTaskCreate_Task)
 <LI><a href="#[66]">LEDTS0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[13]">PMU0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[4a]">POSIF0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[4b]">POSIF0_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[4c]">POSIF1_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[4d]">POSIF1_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[a]">SCU_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_xmc4400.o(i.SystemInit) referenced from startup_xmc4400.o(.text)
 <LI><a href="#[69]">USB0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[5a]">USIC0_0_IRQHandler</a> from irq_handle.o(i.USIC0_0_IRQHandler) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[5b]">USIC0_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[5c]">USIC0_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[5d]">USIC0_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[5e]">USIC0_4_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[5f]">USIC0_5_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[60]">USIC1_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[61]">USIC1_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[62]">USIC1_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[63]">USIC1_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[64]">USIC1_4_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[65]">USIC1_5_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[14]">VADC0_C0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[15]">VADC0_C0_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[16]">VADC0_C0_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[17]">VADC0_C0_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[18]">VADC0_G0_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[19]">VADC0_G0_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[1a]">VADC0_G0_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[1b]">VADC0_G0_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[1c]">VADC0_G1_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[1d]">VADC0_G1_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[1e]">VADC0_G1_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[1f]">VADC0_G1_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[20]">VADC0_G2_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[21]">VADC0_G2_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[22]">VADC0_G2_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[23]">VADC0_G2_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[24]">VADC0_G3_0_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[25]">VADC0_G3_1_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[26]">VADC0_G3_2_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[27]">VADC0_G3_3_IRQHandler</a> from startup_xmc4400.o(.text) referenced from startup_xmc4400.o(RESET)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_xmc4400.o(.text)
 <LI><a href="#[71]">fputc</a> from main.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[6b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[73]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[72]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[74]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[75]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[ca]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN0_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CCU40_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CCU40_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CCU40_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CCU40_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CCU41_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CCU41_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CCU41_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CCU41_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CCU42_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CCU42_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CCU42_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CCU42_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CCU43_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CCU43_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CCU43_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CCU43_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CCU80_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CCU80_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CCU80_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CCU80_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CCU81_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CCU81_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CCU81_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CCU81_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DAC0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DAC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DSD0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DSD0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DSD0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DSD0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DSD0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DSD0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DSD0_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DSD0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>ERU0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ERU0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ERU0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ERU0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>ERU1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ERU1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ERU1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ERU1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>ETH0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>FCE0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPDMA0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>HRPWM_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>HRPWM_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>HRPWM_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>HRPWM_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>LEDTS0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PMU0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>POSIF0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>POSIF0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>POSIF1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>POSIF1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SCU_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USB0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USIC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USIC0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USIC0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USIC0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USIC0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USIC1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USIC1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USIC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USIC1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USIC1_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USIC1_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>VADC0_C0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>VADC0_C0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>VADC0_C0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>VADC0_C0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>VADC0_G0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>VADC0_G0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>VADC0_G0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>VADC0_G0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>VADC0_G1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>VADC0_G1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>VADC0_G1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>VADC0_G1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>VADC0_G2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>VADC0_G2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>VADC0_G2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>VADC0_G2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>VADC0_G3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>VADC0_G3_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>VADC0_G3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>VADC0_G3_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4400.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[76]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[dd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>AppTaskCreate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sys_task.o(i.AppTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AppTaskCreate &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>AppTaskCreate_Task</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sys_task.o(i.AppTaskCreate_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AppTaskCreate_Task &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_task.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[83]"></a>GPIO_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Init &rArr; XMC_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[b8]"></a>IRQ_Enable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, irq_handle.o(i.IRQ_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[8b]"></a>OSCHP_GetFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_xmc4400.o(i.OSCHP_GetFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>SystemCoreClockSetup</STRONG> (Thumb, 484 bytes, Stack size 8 bytes, system_xmc4400.o(i.SystemCoreClockSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockSetup &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_xmc4400.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[8e]"></a>SystemCoreSetup</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, system_xmc4400.o(i.SystemCoreSetup))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_xmc4400.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SystemCoreClockSetup &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreSetup
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>UART_Init</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, usic.o(i.UART_Init))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[92]"></a>UART_SendData</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usic.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5a]"></a>USIC0_0_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, irq_handle.o(i.USIC0_0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USIC0_0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_ToggleOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4400.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>XMC_GPIO_Init</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, xmc4_gpio.o(i.XMC_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XMC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[90]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[de]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[7e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate_Task
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[df]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[e1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[71]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[6b]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; AppTaskCreate &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[bd]"></a>pvPortMalloc</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[a8]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[95]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>

<P><STRONG><a name="[c0]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.vApplicationMallocFailedHook))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[c8]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[9b]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[a7]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[97]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[96]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[80]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate_Task
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[82]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate_Task
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[a3]"></a>vPortFree</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[c9]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c1]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[9d]"></a>vQueueAddToRegistry</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[b4]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[87]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED2_Task
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Task
</UL>

<P><STRONG><a name="[81]"></a>vTaskDelete</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate_Task
</UL>

<P><STRONG><a name="[ce]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[bc]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[c5]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[c3]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[7f]"></a>vTaskStartScheduler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[b2]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[77]"></a>vTaskSwitchContext</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[c7]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[9c]"></a>xQueueGenericCreate</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[a5]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[cc]"></a>xQueueGenericSend</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[d0]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[b0]"></a>xQueueReceive</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[cf]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[7d]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate_Task
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[cd]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[b5]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[88]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a2]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[bb]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[b3]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[c6]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[ad]"></a>xTimerGenericCommand</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[93]"></a>prvSetupHardware</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.prvSetupHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvSetupHardware &rArr; GPIO_Init &rArr; XMC_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>XMC_GPIO_SetOutputHigh</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.XMC_GPIO_SetOutputHigh))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[8f]"></a>XMC_GPIO_ToggleOutput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, irq_handle.o(i.XMC_GPIO_ToggleOutput))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_0_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>LED1_Task</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_task.o(i.LED1_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED1_Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_ToggleOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_task.o(i.AppTaskCreate_Task)
</UL>
<P><STRONG><a name="[70]"></a>LED2_Task</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_task.o(i.LED2_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED2_Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_ToggleOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_task.o(i.AppTaskCreate_Task)
</UL>
<P><STRONG><a name="[86]"></a>XMC_GPIO_ToggleOutput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_task.o(i.XMC_GPIO_ToggleOutput))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED2_Task
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Task
</UL>

<P><STRONG><a name="[a0]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[a1]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[a4]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[aa]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[ab]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[ba]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[94]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[98]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[9e]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[9f]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[73]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[a6]"></a>prvInitialiseNewTask</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[99]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[c4]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[9a]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[b9]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[a9]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[ac]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[ae]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[b1]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[af]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[b6]"></a>prvSwitchTimerLists</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[74]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[be]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[bf]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[72]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[8a]"></a>delay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_xmc4400.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[91]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
